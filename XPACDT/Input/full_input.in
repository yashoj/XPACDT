##############################################################################
# This is supposed to be a full documentation of possible input parameters! ##
# More comments go here ######################################################
##############################################################################

$system                     # general parameters

seed = 0                    # Seed for random number generator
dof = 4                     # the number of degrees of freedom
job = sample	                # The job type (possible: sample, propagate, analyze, plot)
electrons = SurfaceHoppingElectrons  # Electronic method to be used (possible: AdiabaticElectrons (default),
                                     #      SurfaceHoppingElectrons, NRPMDElectrons)
Interface = OneDPolynomial  # the interface to the potential to be used (possible: OneDPolynomial, Morse1D,
                            #       MorseDiabatic, Dissociation2states, TullyModel)
folder = test               # the folder for the trajectories

# optional:
picklefile = NameHere.dat   # optional name of pickle file - else: pickle.dat
time = 0 fs                 # the current time of the system in either fs or au

# override or add (for sampling with existing folder)
# continue (for continueing a propagation)
# intermediate_write (for writing the pickle file every output timestep)
$end

##############################################################################

$SurfaceHoppingElectrons  # must match the electrons specified; specific to each electronic method

basis = adiabatic         # Electronic state basis representation (possible: adiabatic, diabatic; default: adiabatic)
initial_state = 0         # Initial state of the system (Counting starts from 0)
n_steps = 100             # Number of electronic steps to be performed for each nuclear steps (default: 1)

rpsh_type = bead          # Type of ring polymer surface hopping (RPSH) 
                          # (possible: bead, centroid, density_matrix; default: bead)
rpsh_rescaling = bead     # Type of RPSH rescaling; this can be done to conserve 
                          # bead or centroid energy (possible: bead, centroid; default: bead)
rescaling_type = nac      # Type of momentum rescaling; (possible: nac, gradient; default: nac)

evolution_picture = schroedinger  # Representation/picture for quantum evolution (possible: schroedinger (default), interaction)
ode_solver = runga_kutta  # ODE solver to be used for propagation (possible: runga_kutta (default), scipy,
                          #     unitary (this needs 'evolution_picture' = schroedinger))
$end

##############################################################################

$NRPMDElectrons      # must match the electrons specified; specific to each electronic method

basis = diabatic     # Electronic state basis representation (possible: adiabatic, diabatic)
$end

##############################################################################

$OneDPolynomial # must match the interface specified; specific to each interface

a = 0 0 0.5
x0 = 0
$end

##############################################################################

$Morse1D   # must match the interface specified; specific to each interface

De = 0.04556
a = 1.94  # 0.97
re = 2.50  # 1.70
b = 0.04556
$end

##############################################################################

$MorseDiabatic  # must match the interface specified; specific to each interface

model_type = model_1         # Model number to be used (possible: model_1, model_2, model_3)
n_states = 3                 # Number of morse diabatic states (possible: 2, 3)
$end

##############################################################################

$Dissociation2states  # must match the interface specified; specific to each interface

model_type = strong_coupling         # Model type to be used (possible: strong_coupling, weak_coupling)
$end

##############################################################################

$TullyModel  # must match the interface specified; specific to each interface

model_type = model_A         # Model type to be used (possible: model_A, model_B, model_C)
$end

##############################################################################

$rpmd                       # RPMD input

beads = 4                   # Number of beads used; 1 or even numbers; TODO: different numbers
beta = 8.0                  # Beta used for the springs
nm_transform = matrix       # Optional; ring polymer normal mode transformation type (possible: 'matrix' (default), 'fft')
$end

##############################################################################

$thermostat                 # thermostat input

method = MassiveAndersen    # Thermostat method (possible: MassiveAndersen; desired:...)
time = 100 fs               # timescale for thermostattting
$end

##############################################################################

$sampling               # sampling input

method = Wigner         # method to be used for sampling (possible: Wigner, Quasiclassical, Fixed, Thermostatted)
samples = 1000          # number of samples to be collected

# optional:
modes = 2 3 4           # modes to be sampled (possible: 'linear', 'nonlinear', list of integers, empty)
quantum_numbers = 0 0 2 # the quantum number used in Quasiclassical sampling for each mode
temperature = 300       # in Kelvin
time = 10 fs            # time between samples for thermostated sampling in fs or au;
                        # needs to be multiple of 'timestep' in 'nuclei_propagator'

$end

##############################################################################

$nuclei_propagator             # nuclei propagator input

method = VelocityVerlet # method to be used for propagating (possible: VelocityVerlet)
timestep = 0.01 fs      # timestep in fs or au

# optional:
# TODO
$end

##############################################################################

$propagation	    # propagation input

time_end = 1.0 au    # end time for propagation

# optional:
time_start = 1.0 au  # start time set for the system
time_output = 1.0 au # time step used for the full system and logging; if not given, the timestep of the nuclei is used;
                     # needs to be multiple of 'timestep' in 'nuclei_propagator'
$end

##############################################################################

$coordinates	           # coordinates given here

type = mass-value      # coordinate format (possible: mass-value, xyz); TODO: description here
1.0 2.0 3.0
2.0 1.0 4.0
$end

##############################################################################

$momenta               # momenta, must be the same ordering as coordinates

1.0 2.0 3.0
4.0 5.0 6.0
$end

##############################################################################

$command1 # commands are used for analysis - command name is also used for output file name if no other name given.
op = +pos # operations
op0 = +pos
value = histogram -3.0 3.0 10 # way to analyze the data; could be 'mean', 'std' 'percentile x', 'histogram min max n'
format = value # format for printing: time - one line per timestep; value - one line per value
filename = blah # optional
$end

### more comments!!
