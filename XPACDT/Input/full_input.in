##############################################################################
# This is supposed to be a full documentation of possible input parameters! ##
# More comments go here ######################################################
##############################################################################

$system                     # general parameters

# Required parameters
dof = 4                     # integer, required: the number of degrees of freedom
job = sample	                # (sample, propagate, analyze, plot), required: The job type.
Interface = OneDPolynomial  # (OneDPolynomial, BKMP2, EckartBarrier), required: The interface to the potential to be used.
folder = test               # string, required: Base folder for the trajectories.

# Optional parameters
seed = 0                    # integer, optional : Seed for random number generator
picklefile = NameHere.dat   # string, optional: Name of pickle file - else: pickle.dat
time = 0 fs                 # float, optional: The current time of the system in either fs or au.
overwrite                   # optional: For sampling with existing folder: overwrite old files; either add or overwrite can be given
add                         # optional: For sampling with existing folder: add samples up to required number; either add or overwrite can be given
continue                    # optional: If given, the propagation is continue.
intermediate_write          # optional: If givenm the pickle file is write every output timestep

$end

##############################################################################

$OneDPolynomial # must match the interface specified; specific to each interface

# Required parameters
a = 0 0 0.5     # several float, required: Expansion coefficients for the polynomial.

# Optional parameters
x0 = 0          # float, optional: Equilibrium position of the polynomial.

$end

##############################################################################

$rpmd                       # RPMD input

# Required parameters
beads = 4                   # integer, required: Number of beads used; 1 or even numbers
beta = 8.0                  # float, required: Beta used for the springs in au.

# Optional parameters
nm_transform = matrix       # (matrix, fft), optional: ring polymer normal mode transformation type

$end

##############################################################################

$thermostat                 # thermostat input

# Required parameters
method = MassiveAndersen    # Thermostat method (possible: MassiveAndersen; desired:...)
time = 100 fs               # timescale for thermostattting

# Optional parameters

$end

##############################################################################

$sampling               # sampling input

method = Wigner         # method to be used for sampling (possible: Wigner, Quasiclassical, Fixed, Thermostatted)
samples = 1000          # number of samples to be collected

# optional:
modes = 2 3 4           # modes to be sampled (possible: 'linear', 'nonlinear', list of integers, empty)
quantum_numbers = 0 0 2 # the quantum number used in Quasiclassical sampling for each mode
temperature = 300       # in Kelvin
time = 10 fs            # time between samples in fs or au

$end

##############################################################################

$nuclei_propagator             # nuclei propagator input

method = VelocityVerlet # method to be used for propagating (possible: VelocityVerlet)
timestep = 0.01 fs      # timestep in fs or au

# optional:
# TODO
$end

##############################################################################

$propagation	    # propagation input

time_end = 1.0 au # end time for propagation

# optional:
time_start = 1.0 au # start time set for the system
time_output = 1.0 # time step used for the full system and logging; if not given, the timestep of the nuclei is used
$end

##############################################################################

$coordinates	           # coordinates given here

type = mass-value      # coordinate format (possible: mass-value, xyz); TODO: description here
1.0 2.0 3.0
2.0 1.0 4.0
$end

##############################################################################

$momenta               # momenta, must be the same ordering as coordinates

1.0 2.0 3.0
4.0 5.0 6.0
$end

##############################################################################

$command1 # commands are used for analysis - command name is also used for output file name
op = +pos # operations
op0 = +pos
value = histogram -3.0 3.0 10 # way to analyze the data; could be 'mean', 'std' 'percentile x', 'histogram min max n'
format = value # format for printing: time - one line per timestep; value - one line per value
$end

### more comments!!
