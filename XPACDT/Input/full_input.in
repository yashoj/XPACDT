##############################################################################
# This is supposed to be a full documentation of possible input parameters! ##
# More comments go here ######################################################
##############################################################################

$system                     # general parameters

# Required parameters
dof = 4                     # integer, required: the number of degrees of freedom
job = sample	                # (sample, propagate, analyze, plot), required: The job type.
Interface = OneDPolynomial  # (OneDPolynomial, BKMP2, CW, LWAL, EckartBarrier), required: The interface to the potential to be used.
folder = test               # string, required: Base folder for the trajectories.

# Optional parameters
seed = 0                    # integer, optional : Seed for random number generator
picklefile = NameHere.dat   # string, optional: Name of pickle file - else: pickle.dat
time = 0 fs                 # float, optional: The current time of the system in either fs or au.
overwrite                   # optional: For sampling with existing folder: overwrite old files; either add or overwrite can be given
add                         # optional: For sampling with existing folder: add samples up to required number; either add or overwrite can be given
continue                    # optional: If given, the propagation is continue.
intermediate_write          # optional: If givenm the pickle file is write every output timestep

$end

##############################################################################

$OneDPolynomial # must match the interface specified; specific to each interface

# Required parameters
a = 0 0 0.5     # floats separated by spaces, required: Expansion coefficients for the polynomial.

# Optional parameters
x0 = 0          # float, optional: Equilibrium position of the polynomial.

$end

##############################################################################

# These fitted PES don't have any parameters.
$BKMP
$end

$CW
$end

$LWAL
$end

##############################################################################

# $EckartBarrier # must match the interface specified; specific to each interface
# 
# # Required parameter set 1 - please see the definition of the Eckart barrier
# A = 0.0     # float
# B = 0.25    # float
# L = 1.0     # float
# 
# # Alternative parameter set - please see the definition of the Eckart barrier
# w = 0.001   # float
# h = 0.2     # float
# d = 0.0     # float
# m = 1836    # float
# $end

##############################################################################

# $plot		# For plotting potential energy surfaces
# dof = 1 2	  # 1 or 2 integers. The degrees of freedom that should be scanned. Indices start at 0.
# start = 1.0 1.0 # Start values of the degrees of freedom that are scanned.
# end = 3.0 3.0	  # End values of the degrees of freedom that are scanned.
# step = 0.1 0.1  # Step size in the scan.
# 
# Optional parameters:
# internal	  # Use of internal degrees of freedom as definied in specific interfaces.
# optimize	  # If all not scanned degrees of freedom are optimized (instead of kept at the initial value).
# $end

##############################################################################

$rpmd                       # RPMD input

# Required parameters
beads = 4                   # integer, required: Number of beads used; 1 or even numbers
beta = 8.0                  # float, required: Beta used for the springs in au.

# Optional parameters
nm_transform = matrix       # (matrix, fft), optional: ring polymer normal mode transformation type

$end

##############################################################################

$thermostat                 # thermostat input

# Required parameters
method = MassiveAndersen    # Thermostat method (possible: MassiveAndersen; desired:...)
time = 100 fs               # timescale for thermostattting

# Optional parameters
temperature = 300           # in Kelvin; this is the first option to take temperature from

$end

##############################################################################

$sampling               # sampling input

method = Wigner         # method to be used for sampling (possible: Wigner, Quasiclassical, Fixed, Thermostatted)
samples = 1000          # number of samples to be collected

# optional:
modes = 2 3 4           # modes to be sampled (possible: 'linear', 'nonlinear', list of integers, empty); option for 'Wigner', 'Quasiclassical'
quantum_numbers = 0 0 2 # the quantum number used in 'Quasiclassical' sampling for each mode
temperature = 300       # in Kelvin; this is the second option to take temperature from, option for 'Wigner', 'Thermostatted'
time = 10 fs            # time between samples in fs or au; required option for 'Thermostatted'

$end

##############################################################################

$nuclei_propagator             # nuclei propagator input

method = VelocityVerlet # method to be used for propagating (possible: VelocityVerlet)
timestep = 0.01 fs      # timestep in fs or au

$end

##############################################################################

$propagation	    # propagation input

time_end = 1.0 au # end time for propagation

# optional:
time_start = 1.0 au # start time set for the system
time_output = 1.0 # time step used for the full system and logging; if not given, the timestep of the nuclei is used
$end

##############################################################################

$coordinates	           # coordinates given here

type = mass-value      # coordinate format (possible: mass-value, xyz);
       		       # 	    mass-value: mass followed by all bead positions for a dof per line
		       #	    xyz: A atom name and x-, y-, and z-coordinate per line for each bead, and repeated for each dof
1.0 2.0 3.0
2.0 1.0 4.0
$end


$coordinates	           # coordinates given here

type = xyz             # coordinate format (possible: mass-value, xyz);
       		       # 	    mass-value: mass followed by all bead positions for a dof per line
		       #	    xyz: A atom name and x-, y-, and z-coordinate per line for each bead, and repeated for each dof
H 1.2 0.0 0.0
H -1.2 0.0 0.0
O 0.0 0.0 0.0
$end


##############################################################################

$momenta               # momenta, must be the same ordering as coordinates

1.0 2.0 3.0
4.0 5.0 6.0
$end

##############################################################################

$positionShift	       # Fixed linear shift in positions centroid added to the sampled values;
		       # Format has to be the same as in $coordinates, but only for 1 bead as only centroid shifts are allowed

1.0 2.0 3.0
2.0 1.0 4.0
$end

##############################################################################

$momentumShift         # Fixed linear shift in momentum centroid added to the sampled values;
		       # Format has to be the same as in $momenta, but only for 1 bead as only centroid shifts are allowed


1.0 2.0 3.0
4.0 5.0 6.0
$end

##############################################################################

$commandNAME                    # commands are used for analysis - command name is also used for output file name if no other name given.

op = +pos                       # operation to be performed; see help for details!
format = value                  # format for file output: (possible: 'time', 'value', '2d'); time - one line per timestep; value - one line per value; '2d' - Blocked data for 2d plotting of a histogram over time
value = histogram -3.0 3.0 10   # way to analyze the data; possible: 'mean', 'std' 'percentile x', 'histogram min_value max_value number_bins', '2dhistogram min_value_1 max_value_1 number_bins_1 min_value_2 max_value_2 number_bins_2')

# optional:
op0 = +pos                      # t=0 operation for correlation functions; see help for details!
filename = blah                 # Name for output file
2op0 = +pos                     # t=0 operation for 2d histogram
2op = +pos                      # second operation for 2d histogram
step = 1 2 5                    # List of time steps (indices, not actual times) to be used for the analysis

$end

### more comments!!
