$system                     # general parameters

seed = 0                    # Seed for random number generator
dof = 1                     # the number of degrees of freedom
job = propagate	                # The job type (possible: sample, propagate, analyze, plot)
electrons = SurfaceHoppingElectrons  # Electronic method to be used (possible: SurfaceHoppingElectrons, NRPMDElectrons)
Interface = MorseDiabatic  # the interface to the potential to be used (possible: OneDPolynomial)

$end

##############################################################################

$SurfaceHoppingElectrons  # must match the electrons specified; specific to each electronic method

basis = adiabatic         # Electronic state basis representation (possible: adiabatic, diabatic; default: adiabatic)
initial_state = 0         # Initial state of the system (Counting starts from 0)
timestep_scaling_factor = 0.01  # Scaling factor to determine electronic timestep from nuclear step

rpsh_type = bead          # Type of ring polymer surface hopping (RPSH) 
                          # (possible: bead, centroid, density_matrix; default: bead)
rpsh_rescaling = bead     # Type of RPSH rescaling; this can be done to conserve 
                          # bead or centroid energy (possible: bead, centroid; default: bead)
rescaling_type = nac      # Type of momentum rescaling; (possible: nac, gradient; default: nac)

evolution_picture = schroedinger
#evolution_picture = interaction  # Representation/picture for quantum evolution (possible: interaction (default), schroedinger)
#ode_solver = rk4
ode_solver = unitary
$end

##############################################################################

$MorseDiabatic  # must match the interface specified; specific to each interface

model_type = model_3         # Model number to be used (possible: model_1, model_2, model_3)
n_states = 2                 # Number of morse diabatic states (possible: 2, 3)
$end

##############################################################################

$nuclei_propagator             # nuclei propagator input

method = VelocityVerlet # method to be used for propagating (possible: VelocityVerlet)
timestep = 0.1 fs      # timestep in fs or au

$end

##############################################################################

$propagation	    # propagation input

time_end = 1.0 au # end time for propagation

# optional:
time_output = 1.0 
$end

##############################################################################

$coordinates	           # coordinates given here

type = mass-value      # coordinate format (possible: mass-value, xyz); TODO: description here
1.0 2.5
$end

##############################################################################

$momenta               # momenta, must be the same ordering as coordinates

0.001
$end

##############################################################################
